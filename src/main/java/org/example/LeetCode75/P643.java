package org.example.LeetCode75;

import java.sql.Array;
import java.util.*;
import java.util.stream.Collectors;


public class P643 {
    private List<List<Integer>> global = new ArrayList<>();
    public double findMaxAverage(int[] nums, int k) {
        int maxIdx = nums.length - k + 1;
        List<Double> sumList = new ArrayList<>();

        if(nums == null || nums.length < k ) {
            return 0;
        }
        for(int i=0; i<maxIdx; i++) {
            int sum = 0;

            for(int j=i; j < i+k; j++) {
                sum += nums[j];
            }
            sumList.add(((double)sum/k));
        }
        return Collections.max(sumList);

    }

    /**
     * You are given an integer array nums consisting of n elements, and an integer k.
     *
     * Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.
     * @param args
     */
    public static void main(String[] args) {
        P643 p = new P643();
        int[] nums = {544,943,727,493,995,459,769,236,646,733,208,874,491,288,78,756,880,610,24,967,3,890,720,51,948,125,429,978,408,468,923,56,722,758,424,951,558,999,74,482,247,955,108,661,551,156,962,9,261,630,638,548,513,159,501,856,881,21,783,72,731,616,592,433,651,534,621,453,766,770,265,208,462,161,823,950,565,402,623,469,905,152,210,199,551,468,984,308,377,365,553,495,1,753,658,444,601,488,140,350,61,527,334,840,249,889,926,61,981,686,1000,110,986,406,399,897,296,672,882,474,530,771,245,986,242,177,216,706,533,350,244,440,77,31,670,336,973,819,188,787,680,993,576,198,612,114,41,417,509,273,847,407,73,687,167,578,604,506,995,255,251,296,746,86,307,365,434,433,584,290,836,725,141,527,612,153,730,509,471,986,20,965,406,787,551,422,917,516,511,651,611,49,881,743,163,388,68,996,559,974,111,104,392,766,760,704,725,876,671,234,305,196,326,796,559,354,145,159,609,216,152,435,926,171,31,954,997,47,591,218,72,123,309,286,833,586,173,515,59,52,246,387,202,10,146,597,188,788,681,262,317,901,942,752,542,24,885,722,888,270,110,666,324,417,311,786,112,61,905,772,1,618,211,851,83,115,651,396,386,905,941,977,984,721,667,100,972,105,320,68,253,37,113,704,994,259,595,360,39,270,340,312,563,723,555,219,803,51,424,349,773,143,843,264,843,271,8,855,256,272,22,889,372,23,473,416,449,347,317,212,275,768,824,626,514,326,214,699,444,367,636,683,444,437,253,441,853,440,718,169,363,459,794,684,343,683,104,886,656,427,457,309,538,581,875,113,854,934,930,627,969,394,776,690,462,836,633,847,816,151,754,421,269,787,205,313,886,615,729,423,404,697,190,428,591,364,657,651,333,129,862,787,790,916,973,32,17,729,154,94,967,734,984,844,899,191,681,862,675,574,891,40,873,350,150,874,668,248,488,796,58,836,444,771,566,405,406,352,41,279,672,384,517,917,495,606,708,874,411,742,711,6,150,423,910,928,319,274,453,621,820,560,613,663,397,62,553,897,420,748,449,39};
        int k = 100;
        p.findMaxAverage(nums, k);
    }
}
